service: kasama-spectrum-add-partition-tmp
frameworkVersion: ‘3’
provider:
  name: aws
  runtime: python3.9
  lambdaHashingVersion: 20201221
  stage: ${env:STAGE, "dev"}
  region: ap-northeast-1
  apiGateway:
    apiKeys:
      - kasama-${sls:stage}-apigw-execute-api-key
    resourcePolicy:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/*
        Condition:
          StringEquals:
            aws:SourceVpce:
              - vpce-07237b806bd0ec10e
  endpointType: PRIVATE
  vpcEndpointIds:
    - vpce-07237b806bd0ec10e
plugins:
  - serverless-python-requirements
  - serverless-cloudformation-changesets
package:
  patterns:
    - “!.vscode/**”
    - “!.git/**”
    - “!.gitignore”
    - “!.serverless”
    - “!.serverless/**”
    - “!README.md”
    - “!deploy-shell/**”
    - “!package*.json”
    - “!requirements.txt”
    - “!node_modules/**”
    - “!__pycache__”
    - “!exclude-me.py”
    - “!exclude-me-dir/**”
    - “!*.ps1"
    - “!yarn.lock”
custom:
  accountid: ${AWS::AccountId}068788852374
  vpc:
    prod:
      lambdaSubnetIds:
        subnet1: subnet-f4ad7ebc #kasama-prod-front-a-subnet-2
        subnet2: subnet-f4ad7ebc #kasama-prod-front-c-subnet-2
      endpointSubnetIds:
        subnet1: subnet-f4ad7ebc #kasama-prod-front-a-subnet-2
        subnet2: subnet-f4ad7ebc #kasama-prod-front-c-subnet-2
      id: vpc-29e0f64e
    dev:
      lambdaSubnetIds:
        subnet1: subnet-f4ad7ebc #kasama-dev-front-a-subnet-2
        subnet2: subnet-f4ad7ebc #kasama-dev-front-c-subnet-2
      endpointSubnetIds:
        subnet1: subnet-f4ad7ebc #kasama-dev-front-a-subnet-2
        subnet2: subnet-f4ad7ebc #kasama-dev-front-c-subnet-2
      id: vpc-29e0f64e
  pythonRequirements:
    dockerizePip: false
    usePipenv: false
    layer: true
    useDownloadCache: true
    useStaticCache: true
  region:
    prod: ap-northeast-1
    dev: ap-northeast-1
functions:
  spectrum_add_partition:
    name: ${self:service}-${self:provider.stage}-handler
    handler: handler/handler.hello
    role: LambdaRole
    memorySize: 128
    timeout: 30
    environment:
      ENV: ${self:provider.stage}
      DB_ENDPOINT: kasama-dev-redshift1.cw2ddxcuwacm.ap-northeast-1.redshift.amazonaws.com
      DB_NAME: kasama
      DB_PORT: 5439
      DB_USERNAME: /kasama/dev/redshift1/sys-admin-name
      DB_PASSWORD: /kasama/dev/redshift1/sys-admin-password
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /add_partition
          method: post
          private: true
          integration: lambda-proxy
    vpc:
      securityGroupIds:
        - !Ref kasamaLambdaSecurityGroup
      subnetIds:
        - ${self:custom.vpc.${sls:stage}.lambdaSubnetIds.subnet1}
        - ${self:custom.vpc.${sls:stage}.lambdaSubnetIds.subnet2}
resources:
  Description: kasama Internal API
  Resources:
    kasamaLambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: kasamaLambdaSecurityGroup
        GroupName: kasama-${sls:stage}-sg-lambda
        VpcId: ${self:custom.vpc.${sls:stage}.id}
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: "sts:AssumeRole"
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole