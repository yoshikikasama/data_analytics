service: spectrum-add-partition-tmp
frameworkVersion: ‘3’
provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: ${env:STAGE, "dev"}
  region: ap-northeast-1
  apiGateway:
plugins:
  - serverless-python-requirements
  - serverless-aws-response-schema-plugin
package:
  exclude:
    - node_modules/**
    - “!.vscode/**”
    - “!.git/**”
    - “!.gitignore”
    - “!.serverless”
    - “!.serverless/**”
    - “!README.md”
    - “!deploy-shell/**”
    - “!package*.json”
    - “!requirements.txt”
    - “!__pycache__”
    - “!exclude-me.py”
    - “!exclude-me-dir/**”
    - “!*.ps1"
    - “!yarn.lock”
custom:
  accountid: ${AWS::AccountId}068788852374
  pythonRequirements:
    dockerizePip: false
    usePipenv: false
    layer: true
    useDownloadCache: true
    useStaticCache: true
  region:
    prod: ap-northeast-1
    dev: ap-northeast-1
functions:
  test-kasama:
    name: ${self:service}-${self:provider.stage}-handler
    handler: handler/handler.lambda_handler
    role: LambdaRole
    memorySize: 128
    timeout: 29
    environment:
      ENV: ${self:provider.stage}
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /
          method: post
          private: true
          integration: lambda
          responseSchemas:
            200: 
              application/json: ${file(models/output.json)}
            500: 
              application/json: ${file(models/output.json)}
          response:
            statusCodes:
              200:
                pattern: ‘’ # JSON response
                template: $input.path(“$.body”) # JSON return object
              400:
                pattern: ‘.*“Status”:400,.*’ # JSON response
                template: $input.path(“$.errorMessage”) # JSON return object
              500:
                pattern: ‘.*“Status”:500,.*’ # JSON response
                template: $input.path(“$.errorMessage”) # JSON return object
resources:
  Description: kasama Internal API
  Resources:
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: "sts:AssumeRole"
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole